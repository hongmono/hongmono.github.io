<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-01-04T23:00:18+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hongmono</title><subtitle>시도하는 개발자</subtitle><author><name>Jungwook Hong</name></author><entry><title type="html">Flutter에서 ble사용하기 flutter-reactive-ble</title><link href="http://localhost:4000/flutter/flutter-reactive-ble/" rel="alternate" type="text/html" title="Flutter에서 ble사용하기 flutter-reactive-ble" /><published>2023-01-04T00:00:00+09:00</published><updated>2023-01-04T00:00:00+09:00</updated><id>http://localhost:4000/flutter/flutter-reactive-ble</id><content type="html" xml:base="http://localhost:4000/flutter/flutter-reactive-ble/"><![CDATA[<p>bluetooth 통신에는 bluetooth classic과 bluetooth low energy가 있습니다.</p>

<p><a href="https://pub.dev/packages/flutter_reactive_ble">flutter_reactive_ble</a> 는 ble(bluetooth low energy) 통신을 지원하는 패키지입니다.</p>

<p>다른 유명한 패키지로는 <a href="https://pub.dev/packages/flutter_blue_plus">flutter_blue_plus</a> 가 있습니다. <a href="https://pub.dev/packages/flutter_blue">flutter_blue</a>가 개발이 중단되어 다른 개발자가 이어서 개발하는 패키지로 알고 있습니다.</p>

<p>이번 포스트에서는 flutter_reactive_ble의 사용방법에 대해서 알아보겠습니다.</p>

<hr />

<h2 id="installation">Installation</h2>

<p>명령어로 설치하는 방법입니다.
<code class="language-plaintext highlighter-rouge">flutter pub add flutter_reactive_ble</code></p>

<p>또는 pubspec.yaml 에 입력하여 설치하는 방법입니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">dependencies</span><span class="pi">:</span>
    <span class="na">flutter_reactive_ble</span><span class="pi">:</span> <span class="s">^5.0.3</span>
</code></pre></div></div>

<hr />

<h2 id="features">Features</h2>

<p>다음은 pub.dev에 있는 내용입니다.</p>

<p>The reactive BLE lib supports the following:</p>

<ul>
  <li>BLE device discovery</li>
  <li>Observe host device BLE status</li>
  <li>Establishing a BLE connection</li>
  <li>Maintaining connection status of multiple BLE devices</li>
  <li>Discover services(will be implicit)</li>
  <li>Read / write a characteristic</li>
  <li>Subscribe to a characteristic</li>
  <li>Clear GATT cache</li>
  <li>Negotiate MTU size</li>
</ul>

<hr />

<h2 id="getting-started">Getting Started</h2>

<p>Android
안드로이드에서 사용하려면 <code class="language-plaintext highlighter-rouge">AndroidManifest.xml</code>에 다음의 권한을 추가해야 합니다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">"android.permission.BLUETOOTH_SCAN"</span> <span class="na">android:usesPermissionFlags=</span><span class="s">"neverForLocation"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">"android.permission.BLUETOOTH_CONNECT"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">"android.permission.ACCESS_FINE_LOCATION"</span> <span class="na">android:maxSdkVersion=</span><span class="s">"30"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">"android.permission.ACCESS_COARSE_LOCATION"</span> <span class="na">android:maxSdkVersion=</span><span class="s">"30"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<hr />

<h2 id="usage">Usage</h2>

<p>패키지를 import 합니다.</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:flutter_reactive_ble/flutter_reactive_ble.dart'</span><span class="o">;</span>
</code></pre></div></div>

<p>Flutter_reactive_ble 를 사용하기 위해서는 객체를 선언해야 합니다</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="n">flutterReactiveBle</span> <span class="o">=</span> <span class="n">FlutterReactiveBle</span><span class="p">();</span>
</code></pre></div></div>

<p>BLE 디바이스를 검색하여 코드입니다.
results.contains(device) 로 검색을 하면 false만 출력되어 id끼리 비교했습니다.</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">List</span><span class="p">&lt;</span><span class="n">DiscoveredDevice</span><span class="p">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="p">[];</span>

<span class="n">flutterReactiveBle</span><span class="o">.</span><span class="na">scanForDevices</span><span class="p">(</span><span class="nl">withServices:</span> <span class="p">[])</span><span class="o">.</span><span class="na">listen</span><span class="p">((</span><span class="n">DiscoveredDevice</span> <span class="n">device</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">results</span><span class="o">.</span><span class="na">any</span><span class="p">((</span><span class="n">result</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">result</span><span class="o">.</span><span class="na">id</span> <span class="o">==</span> <span class="n">device</span><span class="o">.</span><span class="na">id</span><span class="p">))</span> <span class="k">return</span><span class="p">;</span>
    <span class="n">results</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="n">device</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>BLE 디바이스와 연결, 해제하는 코드입니다.
Flutter_reactive_ble 패키지에는 디바이스와 연결하는 함수는 있지만 연결을 해제하는 함수는 따로 존재하지 않습니다.
연결할 때 만들어지는 stream을 cancel하는것으로 연결을 해제할 수 있습니다.</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">StreamSubscription</span><span class="p">&lt;</span><span class="n">ConnectionStateUpdate</span><span class="p">&gt;</span> <span class="n">connection</span><span class="p">;</span>

<span class="c1">// 연결</span>
<span class="n">connection</span> <span class="o">=</span> <span class="n">flutterReactiveBle</span><span class="o">.</span><span class="na">connectToDevice</span><span class="p">(</span><span class="nl">id:</span> <span class="n">device</span><span class="o">.</span><span class="na">id</span><span class="p">,</span> <span class="nl">connectionTimeout:</span> <span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">4</span><span class="p">))</span>
            <span class="o">.</span><span class="na">listen</span><span class="p">((</span><span class="n">ConnectionStateUpdate</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">switch</span> <span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="na">connectionState</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">case</span> <span class="n">DeviceConnectionState</span><span class="o">.</span><span class="na">disconnected</span><span class="o">:</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="n">DeviceConnectionState</span><span class="o">.</span><span class="na">connecting</span><span class="o">:</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="n">DeviceConnectionState</span><span class="o">.</span><span class="na">connected</span><span class="o">:</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="n">DeviceConnectionState</span><span class="o">.</span><span class="na">disconnecting</span><span class="o">:</span>
                        <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">});</span>

<span class="c1">// 해제</span>
<span class="n">connection</span><span class="o">.</span><span class="na">cancel</span><span class="p">();</span>
</code></pre></div></div>

<p>디바이스의 Service와 Chracteristic을 찾아 연결하는 코드입니다.</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">flutterReactiveBle</span><span class="o">.</span><span class="na">discoverServices</span><span class="p">(</span><span class="n">device</span><span class="o">.</span><span class="na">id</span><span class="p">)</span><span class="o">.</span><span class="na">then</span><span class="p">((</span><span class="kt">List</span><span class="p">&lt;</span><span class="n">DiscoveredService</span><span class="p">&gt;</span> <span class="n">services</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="n">DiscoverdService</span> <span class="n">service</span> <span class="k">in</span> <span class="n">services</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="n">DiscoveredCharacteristic</span> <span class="n">characteristic</span> <span class="k">in</span> <span class="n">service</span><span class="o">.</span><span class="na">characteristics</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">characteristic</span><span class="o">.</span><span class="na">isNotifiable</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">notifyCharacteristic</span> <span class="o">=</span> <span class="n">QualifiedCharacteristic</span><span class="p">(</span>
                  <span class="nl">serviceId:</span> <span class="n">service</span><span class="o">.</span><span class="na">serviceId</span><span class="p">,</span>
                  <span class="nl">characteristicId:</span> <span class="n">characteristic</span><span class="o">.</span><span class="na">characteristicId</span><span class="p">,</span>
                  <span class="nl">deviceId:</span> <span class="n">device</span><span class="o">.</span><span class="na">id</span><span class="p">,</span>
                <span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span><span class="n">characteristic</span><span class="o">.</span><span class="na">isWritableWithResponse</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">writeCharacteristic</span> <span class="o">=</span> <span class="n">QualifiedCharacteristic</span><span class="p">(</span>
                  <span class="nl">serviceId:</span> <span class="n">service</span><span class="o">.</span><span class="na">serviceId</span><span class="p">,</span>
                  <span class="nl">characteristicId:</span> <span class="n">characteristic</span><span class="o">.</span><span class="na">characteristicId</span><span class="p">,</span>
                  <span class="nl">deviceId:</span> <span class="n">device</span><span class="o">.</span><span class="na">id</span><span class="p">,</span>
                <span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span><span class="n">characteristic</span><span class="o">.</span><span class="na">isWritableWithoutResponse</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span><span class="n">characteristic</span><span class="o">.</span><span class="na">isReadable</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">readCharacteristic</span> <span class="o">=</span> <span class="n">QualifiedCharacteristic</span><span class="p">(</span>
                  <span class="nl">serviceId:</span> <span class="n">service</span><span class="o">.</span><span class="na">serviceId</span><span class="p">,</span>
                  <span class="nl">characteristicId:</span> <span class="n">characteristic</span><span class="o">.</span><span class="na">characteristicId</span><span class="p">,</span>
                  <span class="nl">deviceId:</span> <span class="n">device</span><span class="o">.</span><span class="na">id</span><span class="p">,</span>
                <span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">flutterReactiveBle</span><span class="o">.</span><span class="na">subscribeToCharacteristic</span><span class="p">(</span><span class="n">notifyCharacteristic</span><span class="p">)</span><span class="o">.</span><span class="na">listen</span><span class="p">((</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">Logger</span><span class="p">()</span><span class="o">.</span><span class="na">i</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="n">flutterReactiveBle</span><span class="o">.</span><span class="na">writeCharacteristicWithoutResponse</span><span class="p">(</span>
        <span class="n">writeCharacteristic</span><span class="p">,</span>
        <span class="nl">value:</span> <span class="kd">const</span> <span class="n">Utf8Encoder</span><span class="p">()</span><span class="o">.</span><span class="na">convert</span><span class="p">(</span><span class="s">"Hello World!"</span><span class="p">),</span>
    <span class="p">);</span>

    <span class="n">flutterReactiveBle</span><span class="o">.</span><span class="na">readCharacteristic</span><span class="p">(</span><span class="n">readCharacteristic</span><span class="p">)</span><span class="o">.</span><span class="na">then</span><span class="p">((</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">Logger</span><span class="p">()</span><span class="o">.</span><span class="na">i</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>]]></content><author><name>Jungwook Hong</name></author><category term="flutter" /><category term="flutter" /><category term="ble" /><category term="bluetooth" /><summary type="html"><![CDATA[bluetooth 통신에는 bluetooth classic과 bluetooth low energy가 있습니다.]]></summary></entry></feed>